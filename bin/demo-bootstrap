#!/bin/bash

#
# This script is run once on the first demo instance to bootstrap the cluster
#
echo
echo '#'
echo '# Checking Consul availability'
echo '#'

curl -fs --retry 7 --retry-delay 3 http://consul:8500/v1/agent/services &> /dev/null
if [ $? -ne 0 ]
then
    echo '#'
    echo '# Consul is required, but unreachable'
    echo '#'
    exit
else
    echo '# Consul instance found and responsive'
    echo '#'
fi

echo '#'
echo '# Looking for an existing couchbase cluster'
echo '#'

CBFOUND=0
while [ $CBFOUND != 1 ]; do
    echo -n '.'

    export CB_IP=$(curl -L -s -f http://consul:8500/v1/catalog/service/couchbase | json -aH ServiceAddress | head -1)
    if [ -n "$CB_IP" ]
    then
        let CBFOUND=1

        echo
        echo '#'
        echo '# Found couchbase cluster...'
        echo '#'
    fi
done

if [[ $CB_PASSWORD && ${CB_PASSWORD-x} ]]
    then
    CB_PASSWORD=CB_PASSWORD
    else
    CB_PASSWORD="password"
fi
if [[ $CB_USERNAME && ${CB_USERNAME-x} ]]
    then
    CB_USERNAME=CB_USERNAME
else
    CB_USERNAME="Administrator"
fi

COUCHBASERESPONSIVE=0
while [ $COUCHBASERESPONSIVE != 1 ]; do
    echo -n '.'

    # test the default u/p
    curl -u access:password http://$CB_IP:8091/pools &> /dev/null
    if [ $? -eq 0 ]; then
        let COUCHBASERESPONSIVE=1
    fi

    # test the alternate u/p
    curl -u $CB_USERNAME:$CB_PASSWORD http://$CB_IP:8091/pools &> /dev/null
    if [ $? -eq 0 ]
    then
        let COUCHBASERESPONSIVE=1
    else
        sleep 10
    fi
done
sleep 1

echo
echo '#'
echo '# Demo Testing to see if Couchbase is ready yet'
echo '#'

COUCHBASERESPONSIVE=0
while [ $COUCHBASERESPONSIVE != 1 ]; do
    echo -n '.'

    # test the default u/p
    curl -u access:password http://$CB_IP:8091/pools &> /dev/null
    if [ $? -eq 0 ]; then
        let COUCHBASERESPONSIVE=1
    fi

    # test the alternate u/p
    curl -u $CB_USERNAME:$CB_PASSWORD http://$CB_IP:8091/pools &> /dev/null
    if [ $? -eq 0 ]
    then
        let COUCHBASERESPONSIVE=1
    else
        sleep 10
    fi
done
sleep 1

echo '#'
echo '# Looking for an existing demo cluster'
echo '#'

CLUSTERFOUND=0
CLUSTERIP=$(curl -L -s -f http://consul:8500/v1/catalog/service/demo | json -aH ServiceAddress | head -1)
if [ -n "$CLUSTERIP" ]
then
    let CLUSTERFOUND=1

    echo
    echo '#'
    echo '# Existing cluster...'
    echo '#'

    cd /usr/src/app && nohup npm start &
fi

if [ "$1" = 'bootstrap' ]
    then

    echo
    echo '#'
    echo '# Initializing app'
    echo '#'

    cd /usr/src/app && npm run setup

    if [[ $CB_BUCKET_MEM && ${CB_BUCKET_MEM-x} ]]
        then
        CB_BUCKET_MEM=CB_BUCKET_MEM
    else
        CB_BUCKET_MEM=500
    fi

    curl -X POST -u $CB_USERNAME:$CB_PASSWORD -d name=$CB_BUCKET -d ramQuotaMB=$CB_BUCKET_MEM http://$CB_IP:8091/pools/default/buckets

    cd /usr/src/app && nohup npm start &
fi

echo
echo '#'
echo '# Confirming cluster health...'
echo '#'

DEMORESPONSIVE=0
while [ $DEMORESPONSIVE != 1 ]; do
    echo -n '.'

    curl http://localhost:3000/api/airport/findAll
    if [ $? -eq 0 ]
    then
        let DEMORESPONSIVE=1
    else
        sleep .7
    fi

    # if this never exits, then it will never register as a healthy node in the cluster
    # watch the logs for that...
done

echo
echo '#'
echo '# Registering service instance'
echo '#'

curl -f --retry 7 --retry-delay 3 http://consul:8500/v1/agent/service/register -d "$(printf '{"ID":"demo-%s","Name":"demo","Address":"%s"}' $MYIPPRIVATE $MYIPPRIVATE)"

echo "installed"
