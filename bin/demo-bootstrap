#!/bin/bash

export PRIVATE_IP=$(ip addr show eth0 | grep -o '[0-9]\{1,3\}\.[0-9]\{1,3\}\.[0-9]\{1,3\}\.[0-9]\{1,3\}')
HAVEPUBLIC=$(ip link show | grep eth1)
if [[ $HAVEPUBLIC && ${HAVEPUBLIC-x} ]]
    then
    export PUBLIC_IP=$(ip addr show eth1 | grep -o '[0-9]\{1,3\}\.[0-9]\{1,3\}\.[0-9]\{1,3\}\.[0-9]\{1,3\}')
else
    export PUBLIC_IP=$PRIVATE_IP
fi

echo
echo '#'
echo '# Checking Consul availability'
echo '#'

if [[ $CONSUL_IP && ${CONSUL_IP-x} ]]
    then
    export CONSUL_IP=$CONSUL_IP
    if [[ $CONSUL_PORT && ${CONSUL_PORT-x} ]]
        then
        export CONSUL_PORT=$CONSUL_PORT
    else
        export CONSUL_PORT=8500
    fi
else
    export CONSUL_IP=consul
    export CONSUL_PORT=8500
fi

curl -fs --retry 7 --retry-delay 3 http://$CONSUL_IP:$CONSUL_PORT/v1/agent/services &> /dev/null
if [ $? -ne 0 ]
then
    echo '#'
    echo '# Consul is required, but unreachable'
    echo '#'
    exit
else
    echo '# Consul instance found and responsive'
    echo '#'
fi

echo '#'
echo '# Looking for an existing couchbase cluster'
echo '#'

CBFOUND=0
while [ $CBFOUND != 1 ]; do
    echo -n '.'

    export CB_IP=$(curl -L -s -f http://$CONSUL_IP:$CONSUL_PORT/v1/catalog/service/couchbase | json -aH ServiceAddress | tail -1)
    if [ -n "$CB_IP" ]
    then
        let CBFOUND=1

        echo
        echo '#'
        echo '# Found couchbase cluster...'
        echo '#'
    fi
done

if [[ $CB_PASSWORD && ${CB_PASSWORD-x} ]]
    then
    CB_PASSWORD=CB_PASSWORD
    else
    CB_PASSWORD="password"
fi
if [[ $CB_USERNAME && ${CB_USERNAME-x} ]]
    then
    CB_USERNAME=CB_USERNAME
else
    CB_USERNAME="Administrator"
fi
if [[ $CB_BUCKET && ${CB_BUCKET-x} ]]
    then
    CB_BUCKET=CB_BUCKET
else
    CB_BUCKET="travel-sample"
fi

COUCHBASERESPONSIVE=0
while [ $COUCHBASERESPONSIVE != 1 ]; do
    echo -n '.'

    # test the default u/p
    curl -u access:password http://$CB_IP:8091/pools &> /dev/null
    if [ $? -eq 0 ]; then
        let COUCHBASERESPONSIVE=1
    fi

    # test the alternate u/p
    curl -u $CB_USERNAME:$CB_PASSWORD http://$CB_IP:8091/pools &> /dev/null
    if [ $? -eq 0 ]
    then
        let COUCHBASERESPONSIVE=1
    else
        sleep 10
    fi
done
sleep 1

echo
echo '#'
echo '# Demo Testing to see if Couchbase is ready yet'
echo '#'

COUCHBASERESPONSIVE=0
while [ $COUCHBASERESPONSIVE != 1 ]; do
    echo -n '.'

    # test the default u/p
    curl -u access:password http://$CB_IP:8091/pools &> /dev/null
    if [ $? -eq 0 ]; then
        let COUCHBASERESPONSIVE=1
    fi

    # test the alternate u/p
    curl -u $CB_USERNAME:$CB_PASSWORD http://$CB_IP:8091/pools &> /dev/null
    if [ $? -eq 0 ]
    then
        let COUCHBASERESPONSIVE=1
    else
        sleep 10
    fi
done
sleep 1

echo '#'
echo '# Looking for an existing demo cluster'
echo '#'

if [ "$1" = 'setup' ]
    then

    echo
    echo '#'
    echo '# Initializing app'
    echo '#'

    cd /usr/src/app && npm run setup

    if [[ $CB_BUCKET_MEM && ${CB_BUCKET_MEM-x} ]]
        then
        CB_BUCKET_MEM=CB_BUCKET_MEM
    else
        CB_BUCKET_MEM=512
    fi

    echo "curl -X POST -u $CB_USERNAME:$CB_PASSWORD -d ramQuotaMB="$CB_BUCKET_MEM" http://$CB_IP:8091/pools/default/buckets/$CB_BUCKET"

    curl -X POST -u $CB_USERNAME:$CB_PASSWORD -d ramQuotaMB="$CB_BUCKET_MEM" http://$CB_IP:8091/pools/default/buckets/$CB_BUCKET
elif [ "$1" = 'production' ]
    then
    echo
    echo '#'
    echo '# Starting demo...'
    echo '#'

    cd /usr/src/app && nohup npm start &

    echo
    echo '#'
    echo '# Confirming cluster health...'
    echo '#'

    DEMORESPONSIVE=0
    while [ $DEMORESPONSIVE != 1 ]; do
        echo -n '.'

        curl http://localhost:3000/api/airport/findAll
        if [ $? -eq 0 ]
        then
            let DEMORESPONSIVE=1
        else
            sleep .7
        fi

        # if this never exits, then it will never register as a healthy node in the cluster
        # watch the logs for that...
    done

    echo
    echo '#'
    echo '# Registering service instance'
    echo '#'

    curl -f --retry 7 --retry-delay 3 http://$CONSUL_IP:$CONSUL_PORT/v1/agent/service/register -d "$(printf '{"ID":"demo-%s","Name":"demo","Address":"%s", "Port":3000, "Check":{"HTTP": "http://%s:3000", "Interval": "10s"}}' $PRIVATE_IP $PRIVATE_IP $PRIVATE_IP)"

    echo "installed"

elif [ "$1" = 'develop' ]
    then
    echo
    echo '#'
    echo '# Starting demo...'
    echo '#'

    cd /usr/src/app && npm start
fi
